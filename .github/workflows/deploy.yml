# .github/workflows/ci-cd.yml

name: Deploy Audio Streamer API to Production

# --- Triggers ---
# This workflow runs ONLY on pushes to the 'main' branch.
on:
  push:
    branches: [ "main" ]

jobs:
  # --- Job 1: Build and Push Docker Image ---
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # We push the image immediately after building.
          push: true
          # Tags the image with 'latest' for easy pulling and a unique SHA for versioning.
          tags: |
            ghcr.io/${{ github.repository_owner }}/audio-streamer-api:latest
            ghcr.io/${{ github.repository_owner }}/audio-streamer-api:${{ github.sha }}

  # --- Job 2: Deploy to Production Server ---
  deploy:
    # This job will only run if the 'build-and-push' job completes successfully.
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set a non-interactive frontend to prevent apt-get from hanging on prompts.
            export DEBIAN_FRONTEND=noninteractive
            
            # Navigate to the project directory on the server.
            cd ${{ secrets.PROJECT_PATH }}
            
            # Ensure the project directory is a git repository and owned by the current user.
            git config --global --add safe.directory ${{ secrets.PROJECT_PATH }}
            
            # Pull the latest code changes from the main branch (e.g., for docker-compose.yml updates).
            git pull origin main
            
            # Log in to GitHub Container Registry to pull the new private image.
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Pull the latest version of the application image.
            docker-compose pull audio-streamer-api
            
            # Stop the current running version and start the new one in the background.
            # The '--remove-orphans' flag is good practice to remove any old, unused containers.
            docker-compose up -d --remove-orphans
            
            # Clean up any old, unused Docker images to save disk space.
            docker image prune -af